{"ast":null,"code":"import { useState, useMemo } from 'react';\nimport Fuse from 'fuse.js';\n\nconst useSearchHeroes = json => {\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    query: '',\n    stars: '',\n    element: '',\n    class: '',\n    family: '',\n    event: ''\n  });\n  const {\n    0: clean,\n    1: setClean\n  } = useState(false);\n  const {\n    0: jsonSearch,\n    1: setJsonSearch\n  } = useState(false);\n\n  const createFuse = (json, options) => {\n    let newOptions = options.keys.filter(option => option !== '');\n    newOptions = {\n      threshold: 0.3,\n      keys: newOptions\n    };\n    return new Fuse(json, newOptions);\n  };\n\n  const createOperator = key => {\n    let flag = 0;\n    let operator;\n    let newKey;\n    const result = key.some(object => {\n      const value = Object.values(object);\n\n      if (value[0] !== '') {\n        flag++;\n        operator = value[0];\n      }\n\n      return flag >= 2;\n    });\n\n    if (result) {\n      newKey = key.filter(object => {\n        const value = Object.values(object);\n        return value[0] !== '';\n      });\n      operator = {\n        $and: newKey\n      };\n    }\n\n    return operator;\n  };\n\n  const searching = (json, options, key) => {\n    const newJson = [];\n    const fuse = createFuse(json, options);\n    const operator = createOperator(key);\n    const search = fuse.search(operator);\n    search.forEach(element => {\n      newJson.push(element.item);\n    });\n    console.log(newJson);\n    return newJson;\n  };\n\n  const compare = (a, b) => {\n    if (a.name.trim() < b.name.trim()) {\n      return -1;\n    }\n\n    if (a.name.trim() > b.name.trim()) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  useMemo(() => {\n    let newJson;\n    const {\n      query,\n      stars,\n      element,\n      class: classHero,\n      family,\n      event\n    } = data;\n\n    if (clean) {\n      setData({\n        query: '',\n        stars: '',\n        element: '',\n        class: '',\n        family: '',\n        event: ''\n      });\n      setJsonSearch(json);\n      setClean(false);\n    } else {\n      if (query === '' && stars === '' && element === '' && classHero === '' && family === '' && event === '') {\n        //No tiene nada\n        if (json) {\n          newJson = json.sort(compare);\n          setJsonSearch(newJson);\n        }\n      } else {\n        newJson = searching(json, {\n          threshold: 0.3,\n          keys: [query && {\n            name: 'name'\n          }, stars && {\n            name: 'stars'\n          }, element && {\n            name: 'element'\n          }, classHero && {\n            name: 'class'\n          }, family && {\n            name: 'family'\n          }, event && {\n            name: 'event'\n          }]\n        }, [{\n          name: query\n        }, {\n          stars\n        }, {\n          element\n        }, {\n          class: classHero\n        }, {\n          family\n        }, {\n          event\n        }]);\n        setJsonSearch(newJson);\n      }\n    }\n  }, [json, data, clean]);\n  return {\n    data,\n    setData,\n    jsonSearch,\n    setClean\n  };\n};\n\nexport default useSearchHeroes;","map":{"version":3,"sources":["C:/Users/Arielskap/Documents/empiresRataBoy/src/hooks/useSearchHeroes.jsx"],"names":["useState","useMemo","Fuse","useSearchHeroes","json","data","setData","query","stars","element","class","family","event","clean","setClean","jsonSearch","setJsonSearch","createFuse","options","newOptions","keys","filter","option","threshold","createOperator","key","flag","operator","newKey","result","some","object","value","Object","values","$and","searching","newJson","fuse","search","forEach","push","item","console","log","compare","a","b","name","trim","classHero","sort"],"mappings":"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","sourcesContent":["import { useState, useMemo } from 'react';\r\nimport Fuse from 'fuse.js';\r\n\r\nconst useSearchHeroes = (json) => {\r\n  const [data, setData] = useState({\r\n    query: '',\r\n    stars: '',\r\n    element: '',\r\n    class: '',\r\n    family: '',\r\n    event: '',\r\n  });\r\n  const [clean, setClean] = useState(false);\r\n  const [jsonSearch, setJsonSearch] = useState(false);\r\n\r\n  const createFuse = (json, options) => {\r\n    let newOptions = options.keys.filter((option) => option !== '');\r\n    newOptions = { threshold: 0.3, keys: newOptions };\r\n    return new Fuse(json, newOptions);\r\n  };\r\n\r\n  const createOperator = (key) => {\r\n    let flag = 0;\r\n    let operator;\r\n    let newKey;\r\n\r\n    const result = key.some((object) => {\r\n      const value = Object.values(object);\r\n      if (value[0] !== '') {\r\n        flag++;\r\n        operator = value[0];\r\n      }\r\n      return flag >= 2;\r\n    });\r\n    if (result) {\r\n      newKey = key.filter((object) => {\r\n        const value = Object.values(object);\r\n        return value[0] !== '';\r\n      });\r\n      operator = {\r\n        $and: newKey,\r\n      };\r\n    }\r\n    return operator;\r\n  };\r\n\r\n  const searching = (json, options, key) => {\r\n    const newJson = [];\r\n    const fuse = createFuse(json, options);\r\n    const operator = createOperator(key);\r\n    const search = fuse.search(operator);\r\n    search.forEach((element) => {\r\n      newJson.push(element.item);\r\n    });\r\n    console.log(newJson);\r\n    return newJson;\r\n  };\r\n\r\n  const compare = (a, b) => {\r\n    if (a.name.trim() < b.name.trim()) {\r\n      return -1;\r\n    }\r\n    if (a.name.trim() > b.name.trim()) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  useMemo(() => {\r\n    let newJson;\r\n    const { query, stars, element, class: classHero, family, event } = data;\r\n    if (clean) {\r\n      setData({\r\n        query: '',\r\n        stars: '',\r\n        element: '',\r\n        class: '',\r\n        family: '',\r\n        event: '',\r\n      });\r\n      setJsonSearch(json);\r\n      setClean(false);\r\n    } else {\r\n      if (query === '' && stars === '' && element === '' && classHero === '' && family === '' && event === '') { //No tiene nada\r\n        if (json) {\r\n          newJson = json.sort(compare);\r\n          setJsonSearch(newJson);\r\n        }\r\n      } else {\r\n        newJson = searching(json, {\r\n          threshold: 0.3,\r\n          keys: [\r\n            query && {\r\n              name: 'name',\r\n            },\r\n            stars && {\r\n              name: 'stars',\r\n            },\r\n            element && {\r\n              name: 'element',\r\n            },\r\n            classHero && {\r\n              name: 'class',\r\n            },\r\n            family && {\r\n              name: 'family',\r\n            },\r\n            event && {\r\n              name: 'event',\r\n            },\r\n          ],\r\n        },\r\n        [\r\n          { name: query },\r\n          { stars },\r\n          { element },\r\n          { class: classHero },\r\n          { family },\r\n          { event },\r\n        ]);\r\n        setJsonSearch(newJson);\r\n      }\r\n    }\r\n  }, [json, data, clean]);\r\n  return { data, setData, jsonSearch, setClean };\r\n};\r\n\r\nexport default useSearchHeroes;\r\n"]},"metadata":{},"sourceType":"module"}